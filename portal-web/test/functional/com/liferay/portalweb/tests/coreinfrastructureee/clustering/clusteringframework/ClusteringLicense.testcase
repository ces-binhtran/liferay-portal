@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "2";
	property cluster.enabled = "true";
	property license.required = "true";
	property portal.release = "true";
	property portal.upstream = "false";
	property remote.elasticsearch.enabled = "true";
	property skip.start-app-server = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Clustering";

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "4"
	test LimitPreviouslyValidatedClusterNodes {
		property commerce.enabled = "false";
		property dxp.license.file = "dxp-license-virtual-cluster.xml";

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "8080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "9080");

		Clustering.viewClusterStatusInConsole();

		User.firstLoginPG();

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.shutdownSpecificServer(nodePort = "9080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "10080");

		User.loginPG(
			nodePort = "10080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.openSpecificURL(url = "http://localhost:8080");

		Page.assertNodePortPG(nodePort = "8080");

		Navigator.openSpecificURL(url = "http://localhost:10080");

		Page.assertNodePortPG(nodePort = "10080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "false",
			nodePort = "9080");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "You have exceeded the maximum number of cluster nodes in cluster, overloaded nodes will be deactivated in 2 hours",
			nodePort = "9080");

		Pause(locator1 = "300000");

		Navigator.openSpecificURL(url = "http://localhost:8080");

		Page.assertNodePortPG(nodePort = "8080");

		Navigator.openSpecificURL(url = "http://localhost:10080");

		Page.assertNodePortPG(nodePort = "10080");
	}

	@priority = "5"
	test ViewNodeLimit {
		property commerce.enabled = "false";
		property dxp.license.file = "dxp-license-virtual-cluster.xml";

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "8080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "9080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			nodePort = "10080");

		User.firstLoginPG();

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = "8080");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "You have exceeded the maximum number of cluster nodes in cluster, overloaded nodes will be deactivated in 2 hours",
			nodePort = "10080");

		User.loginPG(
			nodePort = "10080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "10080");

		// TODO Assert message to Admin in the UI when node is scheduled to deactivate

		Pause(locator1 = "300000");

		Navigator.openSpecificURL(url = "http://localhost:10080");

		Alert.viewErrorMessage(errorMessage = "You have exceeded the maximum number of cluster nodes in cluster, please shutdown nodes to recover or register a new license.");
	}

}