@component-name = "portal-document-management"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
	property databases.size = "1";
	property osgi.module.configuration.file.names = "com.liferay.depot.web.internal.configuration.FFDepotStagingConfiguration.config";
	property osgi.module.configurations = "enabled=B&quot;true&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		Depot.remoteStagingSetUp(
			depotName = "Test Depot Name",
			remotePort = "9080",
			remoteStaging = "true");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		Staging.remoteStagingSetUp(
			remotePort = "9080",
			remoteStaging = "true",
			siteName = "Site Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Settings");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		Depot.connectSite(siteList = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that a document using a custom document type from a depot can be published in the staging site when enabling remote staging."
	@priority = "5"
	test PublishDMWithDocumentType {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		DepotNavigator.openDepotAdmin();

		Depot.configureDDMStructures(
			depotName = "Test Depot Name",
			siteName = "Site Name",
			tableEntryText = "Yes");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Depot",
			textField = "DM Document Text");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");
	}

	@description = "This ensures that the shortcut to an image in the depot can be added and published in the staging site when enabling remote staging."
	@priority = "5"
	test PublishImageShortcut {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addDMShortcutCP(
			depotName = "Test Depot Name",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This ensures that an unavailable structure from a depot can not be viewed in the staged site when enabling remote staging."
	@priority = "5"
	test SelectUnavailableStructure {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Depot");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_menuItem = "DM Document Type Depot",
			locator1 = "MenuItem#ANY_MENU_ITEM");
	}

}