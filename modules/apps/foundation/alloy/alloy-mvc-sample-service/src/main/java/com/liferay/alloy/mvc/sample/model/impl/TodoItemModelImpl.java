/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.alloy.mvc.sample.model.impl;

import com.liferay.alloy.mvc.sample.model.TodoItem;
import com.liferay.alloy.mvc.sample.model.TodoItemModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TodoItem service. Represents a row in the &quot;AlloyMVCSample_TodoItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TodoItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodoItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TodoItemImpl
 * @generated
 */
public class TodoItemModelImpl
	extends BaseModelImpl<TodoItem> implements TodoItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a todo item model instance should use the <code>TodoItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "AlloyMVCSample_TodoItem";

	public static final Object[][] TABLE_COLUMNS = {
		{"todoItemId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"todoListId", Types.BIGINT}, {"description", Types.VARCHAR},
		{"priority", Types.INTEGER}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("todoItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("todoListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AlloyMVCSample_TodoItem (todoItemId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,todoListId LONG,description VARCHAR(75) null,priority INTEGER,status INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table AlloyMVCSample_TodoItem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY todoItem.todoItemId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AlloyMVCSample_TodoItem.todoItemId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.alloy.mvc.sample.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.alloy.mvc.sample.model.TodoItem"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.alloy.mvc.sample.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.alloy.mvc.sample.model.TodoItem"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.alloy.mvc.sample.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.alloy.mvc.sample.model.TodoItem"));

	public TodoItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _todoItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTodoItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _todoItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TodoItem.class;
	}

	@Override
	public String getModelClassName() {
		return TodoItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TodoItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TodoItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TodoItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((TodoItem)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TodoItem, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TodoItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TodoItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TodoItem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TodoItem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TodoItem>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TodoItem.class.getClassLoader(), TodoItem.class,
			ModelWrapper.class);

		try {
			Constructor<TodoItem> constructor =
				(Constructor<TodoItem>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TodoItem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TodoItem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TodoItem, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TodoItem, Object>>();
		Map<String, BiConsumer<TodoItem, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TodoItem, ?>>();

		attributeGetterFunctions.put(
			"todoItemId",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getTodoItemId();
				}

			});
		attributeSetterBiConsumers.put(
			"todoItemId",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object todoItemIdObject) {
					todoItem.setTodoItemId((Long)todoItemIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object companyIdObject) {
					todoItem.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object userIdObject) {
					todoItem.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object userNameObject) {
					todoItem.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object createDateObject) {
					todoItem.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(
					TodoItem todoItem, Object modifiedDateObject) {

					todoItem.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"todoListId",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getTodoListId();
				}

			});
		attributeSetterBiConsumers.put(
			"todoListId",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object todoListIdObject) {
					todoItem.setTodoListId((Long)todoListIdObject);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(
					TodoItem todoItem, Object descriptionObject) {

					todoItem.setDescription((String)descriptionObject);
				}

			});
		attributeGetterFunctions.put(
			"priority",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getPriority();
				}

			});
		attributeSetterBiConsumers.put(
			"priority",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object priorityObject) {
					todoItem.setPriority((Integer)priorityObject);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<TodoItem, Object>() {

				@Override
				public Object apply(TodoItem todoItem) {
					return todoItem.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<TodoItem, Object>() {

				@Override
				public void accept(TodoItem todoItem, Object statusObject) {
					todoItem.setStatus((Integer)statusObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTodoItemId() {
		return _todoItemId;
	}

	@Override
	public void setTodoItemId(long todoItemId) {
		_todoItemId = todoItemId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getTodoListId() {
		return _todoListId;
	}

	@Override
	public void setTodoListId(long todoListId) {
		_todoListId = todoListId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TodoItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TodoItem toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TodoItem>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TodoItemImpl todoItemImpl = new TodoItemImpl();

		todoItemImpl.setTodoItemId(getTodoItemId());
		todoItemImpl.setCompanyId(getCompanyId());
		todoItemImpl.setUserId(getUserId());
		todoItemImpl.setUserName(getUserName());
		todoItemImpl.setCreateDate(getCreateDate());
		todoItemImpl.setModifiedDate(getModifiedDate());
		todoItemImpl.setTodoListId(getTodoListId());
		todoItemImpl.setDescription(getDescription());
		todoItemImpl.setPriority(getPriority());
		todoItemImpl.setStatus(getStatus());

		todoItemImpl.resetOriginalValues();

		return todoItemImpl;
	}

	@Override
	public int compareTo(TodoItem todoItem) {
		long primaryKey = todoItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TodoItem)) {
			return false;
		}

		TodoItem todoItem = (TodoItem)object;

		long primaryKey = todoItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;
	}

	@Override
	public CacheModel<TodoItem> toCacheModel() {
		TodoItemCacheModel todoItemCacheModel = new TodoItemCacheModel();

		todoItemCacheModel.todoItemId = getTodoItemId();

		todoItemCacheModel.companyId = getCompanyId();

		todoItemCacheModel.userId = getUserId();

		todoItemCacheModel.userName = getUserName();

		String userName = todoItemCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			todoItemCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			todoItemCacheModel.createDate = createDate.getTime();
		}
		else {
			todoItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			todoItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			todoItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		todoItemCacheModel.todoListId = getTodoListId();

		todoItemCacheModel.description = getDescription();

		String description = todoItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			todoItemCacheModel.description = null;
		}

		todoItemCacheModel.priority = getPriority();

		todoItemCacheModel.status = getStatus();

		return todoItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TodoItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TodoItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TodoItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TodoItem)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TodoItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TodoItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TodoItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TodoItem)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TodoItem>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _todoItemId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _todoListId;
	private String _description;
	private int _priority;
	private int _status;
	private TodoItem _escapedModel;

}